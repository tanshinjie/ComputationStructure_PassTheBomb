/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu16_38 (
    input [15:0] a,
    input [15:0] b,
    input [5:0] alufn,
    output reg [15:0] op,
    output reg z,
    output reg v,
    output reg n,
    output reg [15:0] aOP
  );
  
  
  
  wire [16-1:0] M_add_op;
  wire [1-1:0] M_add_z;
  wire [1-1:0] M_add_v;
  wire [1-1:0] M_add_n;
  reg [16-1:0] M_add_a;
  reg [16-1:0] M_add_b;
  reg [6-1:0] M_add_alufn;
  reg [16-1:0] M_add_carryOut;
  adder16_39 add (
    .a(M_add_a),
    .b(M_add_b),
    .alufn(M_add_alufn),
    .carryOut(M_add_carryOut),
    .op(M_add_op),
    .z(M_add_z),
    .v(M_add_v),
    .n(M_add_n)
  );
  
  wire [16-1:0] M_cmp_op;
  reg [6-1:0] M_cmp_alufn;
  reg [16-1:0] M_cmp_a;
  reg [16-1:0] M_cmp_b;
  reg [1-1:0] M_cmp_z;
  reg [1-1:0] M_cmp_v;
  reg [1-1:0] M_cmp_n;
  compare16_40 cmp (
    .alufn(M_cmp_alufn),
    .a(M_cmp_a),
    .b(M_cmp_b),
    .z(M_cmp_z),
    .v(M_cmp_v),
    .n(M_cmp_n),
    .op(M_cmp_op)
  );
  
  wire [16-1:0] M_shift_op;
  reg [16-1:0] M_shift_a;
  reg [16-1:0] M_shift_b;
  reg [6-1:0] M_shift_alufn;
  shift16_41 shift (
    .a(M_shift_a),
    .b(M_shift_b),
    .alufn(M_shift_alufn),
    .op(M_shift_op)
  );
  
  wire [16-1:0] M_bool_op;
  reg [16-1:0] M_bool_a;
  reg [16-1:0] M_bool_b;
  reg [6-1:0] M_bool_alufn;
  bool16_42 bool (
    .a(M_bool_a),
    .b(M_bool_b),
    .alufn(M_bool_alufn),
    .op(M_bool_op)
  );
  
  always @* begin
    M_bool_a = a;
    M_bool_b = b;
    M_bool_alufn = alufn;
    M_add_a = a;
    M_add_b = b;
    M_add_alufn = alufn;
    M_add_carryOut = M_add_op;
    z = M_add_z;
    v = M_add_v;
    n = M_add_n;
    aOP = M_add_op;
    M_cmp_a = a;
    M_cmp_b = b;
    M_cmp_alufn = alufn;
    M_cmp_z = M_add_z;
    M_cmp_v = M_add_v;
    M_cmp_n = M_add_n;
    M_shift_a = a;
    M_shift_b = b;
    M_shift_alufn = alufn;
    
    case (alufn[4+1-:2])
      default: begin
        op = 8'hff;
      end
      2'h0: begin
        op = M_add_op;
      end
      2'h1: begin
        op = M_bool_op;
      end
      2'h2: begin
        op = M_shift_op;
      end
      2'h3: begin
        op = M_cmp_op;
      end
    endcase
  end
endmodule
