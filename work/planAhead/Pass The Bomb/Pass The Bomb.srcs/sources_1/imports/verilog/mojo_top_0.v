/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    input p1left,
    input p1opp,
    input p1right,
    input p2left,
    input p2opp,
    input p2right,
    input p3left,
    input p3opp,
    input p3right,
    input p4left,
    input p4opp,
    input p4right,
    input startSignal,
    output reg startLED,
    output reg tickingLED,
    output reg p1led,
    output reg p2led,
    output reg p3led,
    output reg p4led,
    output reg [6:0] io_seg_p1,
    output reg [1:0] io_sel_p1,
    output reg [6:0] io_seg_p2,
    output reg [1:0] io_sel_p2,
    output reg [6:0] io_seg_p3,
    output reg [1:0] io_sel_p3,
    output reg [6:0] io_seg_p4,
    output reg [1:0] io_sel_p4
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_states_startLED;
  wire [8-1:0] M_states_count;
  wire [1-1:0] M_states_p1led;
  wire [1-1:0] M_states_p2led;
  wire [1-1:0] M_states_p3led;
  wire [1-1:0] M_states_p4led;
  wire [1-1:0] M_states_rise;
  wire [5-1:0] M_states_scoreP1;
  wire [5-1:0] M_states_scoreP2;
  wire [5-1:0] M_states_scoreP3;
  wire [5-1:0] M_states_scoreP4;
  wire [1-1:0] M_states_draw;
  wire [1-1:0] M_states_ticking;
  wire [1-1:0] M_states_boom;
  wire [1-1:0] M_states_testOut;
  reg [1-1:0] M_states_p1right;
  reg [1-1:0] M_states_p2right;
  reg [1-1:0] M_states_p3right;
  reg [1-1:0] M_states_p4right;
  reg [1-1:0] M_states_p1opp;
  reg [1-1:0] M_states_p2opp;
  reg [1-1:0] M_states_p3opp;
  reg [1-1:0] M_states_p4opp;
  reg [1-1:0] M_states_p1left;
  reg [1-1:0] M_states_p2left;
  reg [1-1:0] M_states_p3left;
  reg [1-1:0] M_states_p4left;
  reg [1-1:0] M_states_startPress;
  game_states_2 states (
    .clk(clk),
    .rst(rst),
    .p1right(M_states_p1right),
    .p2right(M_states_p2right),
    .p3right(M_states_p3right),
    .p4right(M_states_p4right),
    .p1opp(M_states_p1opp),
    .p2opp(M_states_p2opp),
    .p3opp(M_states_p3opp),
    .p4opp(M_states_p4opp),
    .p1left(M_states_p1left),
    .p2left(M_states_p2left),
    .p3left(M_states_p3left),
    .p4left(M_states_p4left),
    .startPress(M_states_startPress),
    .startLED(M_states_startLED),
    .count(M_states_count),
    .p1led(M_states_p1led),
    .p2led(M_states_p2led),
    .p3led(M_states_p3led),
    .p4led(M_states_p4led),
    .rise(M_states_rise),
    .scoreP1(M_states_scoreP1),
    .scoreP2(M_states_scoreP2),
    .scoreP3(M_states_scoreP3),
    .scoreP4(M_states_scoreP4),
    .draw(M_states_draw),
    .ticking(M_states_ticking),
    .boom(M_states_boom),
    .testOut(M_states_testOut)
  );
  wire [7-1:0] M_seg1_seg;
  wire [2-1:0] M_seg1_sel;
  wire [7-1:0] M_seg1_custom_seg;
  reg [8-1:0] M_seg1_values;
  multi_seven_seg_3 seg1 (
    .clk(clk),
    .rst(rst),
    .values(M_seg1_values),
    .seg(M_seg1_seg),
    .sel(M_seg1_sel),
    .custom_seg(M_seg1_custom_seg)
  );
  wire [7-1:0] M_seg2_seg;
  wire [2-1:0] M_seg2_sel;
  wire [7-1:0] M_seg2_custom_seg;
  reg [8-1:0] M_seg2_values;
  multi_seven_seg_3 seg2 (
    .clk(clk),
    .rst(rst),
    .values(M_seg2_values),
    .seg(M_seg2_seg),
    .sel(M_seg2_sel),
    .custom_seg(M_seg2_custom_seg)
  );
  wire [7-1:0] M_seg3_seg;
  wire [2-1:0] M_seg3_sel;
  wire [7-1:0] M_seg3_custom_seg;
  reg [8-1:0] M_seg3_values;
  multi_seven_seg_3 seg3 (
    .clk(clk),
    .rst(rst),
    .values(M_seg3_values),
    .seg(M_seg3_seg),
    .sel(M_seg3_sel),
    .custom_seg(M_seg3_custom_seg)
  );
  wire [7-1:0] M_seg4_seg;
  wire [2-1:0] M_seg4_sel;
  wire [7-1:0] M_seg4_custom_seg;
  reg [8-1:0] M_seg4_values;
  multi_seven_seg_3 seg4 (
    .clk(clk),
    .rst(rst),
    .values(M_seg4_values),
    .seg(M_seg4_seg),
    .sel(M_seg4_sel),
    .custom_seg(M_seg4_custom_seg)
  );
  
  wire [8-1:0] M_my_bin_to_dec_P1_digits;
  reg [7-1:0] M_my_bin_to_dec_P1_value;
  bin_to_dec_7 my_bin_to_dec_P1 (
    .value(M_my_bin_to_dec_P1_value),
    .digits(M_my_bin_to_dec_P1_digits)
  );
  
  wire [8-1:0] M_my_bin_to_dec_P2_digits;
  reg [7-1:0] M_my_bin_to_dec_P2_value;
  bin_to_dec_7 my_bin_to_dec_P2 (
    .value(M_my_bin_to_dec_P2_value),
    .digits(M_my_bin_to_dec_P2_digits)
  );
  
  wire [8-1:0] M_my_bin_to_dec_P3_digits;
  reg [7-1:0] M_my_bin_to_dec_P3_value;
  bin_to_dec_7 my_bin_to_dec_P3 (
    .value(M_my_bin_to_dec_P3_value),
    .digits(M_my_bin_to_dec_P3_digits)
  );
  
  wire [8-1:0] M_my_bin_to_dec_P4_digits;
  reg [7-1:0] M_my_bin_to_dec_P4_value;
  bin_to_dec_7 my_bin_to_dec_P4 (
    .value(M_my_bin_to_dec_P4_value),
    .digits(M_my_bin_to_dec_P4_digits)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_states_p1left = ~p1left;
    M_states_p2left = ~p2left;
    M_states_p3left = ~p3left;
    M_states_p4left = ~p4left;
    M_states_p1opp = ~p1opp;
    M_states_p2opp = ~p2opp;
    M_states_p3opp = ~p3opp;
    M_states_p4opp = ~p4opp;
    M_states_p1right = ~p1right;
    M_states_p2right = ~p2right;
    M_states_p3right = ~p3right;
    M_states_p4right = ~p4right;
    p1led = M_states_p1led;
    p2led = M_states_p2led;
    p3led = M_states_p3led;
    p4led = M_states_p4led;
    led[0+0-:1] = M_states_draw;
    led[1+0-:1] = M_states_ticking;
    led[2+0-:1] = 1'h0;
    led[3+0-:1] = M_states_p1led;
    led[4+0-:1] = M_states_p2led;
    led[5+0-:1] = M_states_p3led;
    led[6+0-:1] = M_states_p4led;
    led[7+0-:1] = M_states_rise;
    M_my_bin_to_dec_P1_value = M_states_scoreP1;
    M_seg1_values = M_my_bin_to_dec_P1_digits;
    io_sel_p1 = M_seg1_sel;
    io_seg_p1 = M_seg1_custom_seg;
    M_my_bin_to_dec_P2_value = M_states_scoreP2;
    M_seg2_values = M_my_bin_to_dec_P2_digits;
    io_sel_p2 = M_seg2_sel;
    io_seg_p2 = M_seg2_custom_seg;
    M_my_bin_to_dec_P3_value = M_states_scoreP3;
    M_seg3_values = M_my_bin_to_dec_P3_digits;
    io_sel_p3 = M_seg3_sel;
    io_seg_p3 = M_seg3_custom_seg;
    M_my_bin_to_dec_P4_value = M_states_scoreP4;
    M_seg4_values = M_my_bin_to_dec_P4_digits;
    io_sel_p4 = M_seg4_sel;
    io_seg_p4 = M_seg4_custom_seg;
    M_states_startPress = startSignal;
    startLED = M_states_startLED;
    tickingLED = M_states_ticking;
    led[2+0-:1] = M_states_testOut;
  end
endmodule
