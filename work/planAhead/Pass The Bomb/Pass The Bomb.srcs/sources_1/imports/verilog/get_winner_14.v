/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module get_winner_14 (
    input clk,
    input rst,
    input [4:0] score_1,
    input [4:0] score_2,
    input [4:0] score_3,
    input [2:0] aluMuxIn,
    output reg [1:0] winnerIs,
    output reg foundWinner,
    output reg [0:0] draw
  );
  
  
  
  localparam FINDWINNER_states = 2'd0;
  localparam FOUDNWINNER_states = 2'd1;
  localparam DRAW_states = 2'd2;
  
  reg [1:0] M_states_d, M_states_q = FINDWINNER_states;
  reg [4:0] M_highest_d, M_highest_q = 1'h0;
  reg [1:0] M_winnerCode_d, M_winnerCode_q = 1'h0;
  
  wire [16-1:0] M_myALU_op;
  wire [1-1:0] M_myALU_z;
  wire [1-1:0] M_myALU_v;
  wire [1-1:0] M_myALU_n;
  wire [16-1:0] M_myALU_aOP;
  reg [16-1:0] M_myALU_a;
  reg [16-1:0] M_myALU_b;
  reg [6-1:0] M_myALU_alufn;
  alu16_37 myALU (
    .a(M_myALU_a),
    .b(M_myALU_b),
    .alufn(M_myALU_alufn),
    .op(M_myALU_op),
    .z(M_myALU_z),
    .v(M_myALU_v),
    .n(M_myALU_n),
    .aOP(M_myALU_aOP)
  );
  
  reg drawSig;
  
  always @* begin
    M_states_d = M_states_q;
    M_winnerCode_d = M_winnerCode_q;
    M_highest_d = M_highest_q;
    
    draw = 1'h0;
    winnerIs = 1'h0;
    M_myALU_a = 1'h0;
    M_myALU_b = 1'h0;
    M_myALU_alufn = 17'h1b207;
    foundWinner = 1'h0;
    
    case (M_states_q)
      FINDWINNER_states: begin
        
        case (aluMuxIn)
          3'h0: begin
            M_myALU_alufn = 6'h35;
            M_myALU_a = score_1;
            M_myALU_b = M_highest_q;
            if (M_myALU_op[0+0-:1] == 1'h0) begin
              M_highest_d = score_1;
            end
          end
          3'h1: begin
            M_myALU_alufn = 6'h35;
            M_myALU_a = score_2;
            M_myALU_b = M_highest_q;
            if (M_myALU_op[0+0-:1] == 1'h0) begin
              M_highest_d = score_2;
            end
          end
          3'h2: begin
            M_myALU_alufn = 6'h35;
            M_myALU_a = score_3;
            M_myALU_b = M_highest_q;
            if (M_myALU_op[0+0-:1] == 1'h0) begin
              M_highest_d = score_3;
            end
          end
          3'h3: begin
            drawSig = (M_highest_q == score_1 & M_highest_q == score_2) | (M_highest_q == score_1 & M_highest_q == score_3) | (M_highest_q == score_2 & M_highest_q == score_3);
            if (drawSig == 1'h1) begin
              M_states_d = DRAW_states;
            end
          end
          3'h4: begin
            M_myALU_alufn = 6'h33;
            M_myALU_a = score_1;
            M_myALU_b = M_highest_q;
            if (M_myALU_op[0+0-:1] == 1'h1) begin
              M_states_d = FOUDNWINNER_states;
              M_winnerCode_d = 2'h1;
            end
          end
          3'h5: begin
            M_myALU_alufn = 6'h33;
            M_myALU_a = score_2;
            M_myALU_b = M_highest_q;
            if (M_myALU_op[0+0-:1] == 1'h1) begin
              M_states_d = FOUDNWINNER_states;
              M_winnerCode_d = 2'h2;
            end
          end
          3'h6: begin
            M_myALU_alufn = 6'h33;
            M_myALU_a = score_3;
            M_myALU_b = M_highest_q;
            if (M_myALU_op[0+0-:1] == 1'h1) begin
              M_states_d = FOUDNWINNER_states;
              M_winnerCode_d = 2'h3;
            end
          end
        endcase
      end
      FOUDNWINNER_states: begin
        M_myALU_alufn = 6'h00;
        M_myALU_a = 1'h0;
        M_myALU_b = M_winnerCode_q;
        winnerIs = M_myALU_op[0+1-:2];
        foundWinner = 1'h1;
      end
      DRAW_states: begin
        draw = 1'h1;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_highest_q <= 1'h0;
      M_winnerCode_q <= 1'h0;
      M_states_q <= 1'h0;
    end else begin
      M_highest_q <= M_highest_d;
      M_winnerCode_q <= M_winnerCode_d;
      M_states_q <= M_states_d;
    end
  end
  
endmodule
